// Generated by gen.go DO NOT EDIT

package must

// Wrap2 is a version of Wrap for 2 arguments.
func Wrap2[In1, In2, Out any](fn func(In1, In2) (Out, error)) func(In1, In2) Out {
	wrapper := func(arg1 In1, arg2 In2) Out {
		out, err := fn(arg1, arg2)
		if err != nil {
			panic(err)
		}
		return out
	}

	return wrapper
}

// Wrap3 is a version of Wrap for 3 arguments.
func Wrap3[In1, In2, In3, Out any](fn func(In1, In2, In3) (Out, error)) func(In1, In2, In3) Out {
	wrapper := func(arg1 In1, arg2 In2, arg3 In3) Out {
		out, err := fn(arg1, arg2, arg3)
		if err != nil {
			panic(err)
		}
		return out
	}

	return wrapper
}

// Wrap4 is a version of Wrap for 4 arguments.
func Wrap4[In1, In2, In3, In4, Out any](fn func(In1, In2, In3, In4) (Out, error)) func(In1, In2, In3, In4) Out {
	wrapper := func(arg1 In1, arg2 In2, arg3 In3, arg4 In4) Out {
		out, err := fn(arg1, arg2, arg3, arg4)
		if err != nil {
			panic(err)
		}
		return out
	}

	return wrapper
}

// Wrap5 is a version of Wrap for 5 arguments.
func Wrap5[In1, In2, In3, In4, In5, Out any](fn func(In1, In2, In3, In4, In5) (Out, error)) func(In1, In2, In3, In4, In5) Out {
	wrapper := func(arg1 In1, arg2 In2, arg3 In3, arg4 In4, arg5 In5) Out {
		out, err := fn(arg1, arg2, arg3, arg4, arg5)
		if err != nil {
			panic(err)
		}
		return out
	}

	return wrapper
}
